@using Models
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.WebUtilities
@using System.IO
@using System.Data
@using BlazorApp1
@inject BlazorApp1.Data.ExcelService service
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@page "/"

<PageTitle>Individuals</PageTitle>

<h1>Individuals</h1>
<label>Search by PIID:</label>
<input @bind-value="@piid" inputmode="numeric" class="form-text" type="search">
<button class="btn btn-primary" @onclick="()=>CallApi()">Search</button>
<button class="btn btn-primary" @onclick="()=>CreateDocument()">Export as Excelfile</button>
<table class="table-bordered">
    <tr>
        <th>Individual ID</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Status</th>
        <th>Sex</th>
        <th>User ID</th>
        <th>Local ID</th>
        <th>PIID</th>
        <th>Date Added</th>
        <th>Relevant Clinical Info</th>
        <th>DOB</th>
        <th>Age</th>
        <th>Phenotypes</th>
    </tr>
    @foreach (IndMessage individual in individuals)
    {
        <tr>
            <td>@individual.IndividualId</td>
            <td>@individual.IndividualFName</td>
            <td>@individual.IndividualLName</td>
            <td>@individual.IndividualStatus</td>
            <td>@individual.IndividualSex</td>
            <td>@individual.UserId</td>
            <td>@individual.LocalId</td>
            <td>@individual.Piid</td>
            <td>@individual.DateAdd</td>
            <td>@individual.RelevantClinicalInfo</td>
            <td>@individual.IndividualBirthDate</td>
            <td>@individual.Age</td>
            <td>
                @foreach (string pt in individual.Phenotype)
                {
                    <p>@pt </p>
                }
            </td>
        </tr>
    }
</table>
<h3>@errorMessage</h3>
@code {
    List<IndMessage> individuals = new List<IndMessage>();
    int piid = 0;
    string errorMessage = "";
    MemoryStream excelstream;
    public DataTable CreateIndividualTable()
    {
        DataTable inds = new DataTable();

        inds.Columns.Add("Individual ID");
        inds.Columns.Add("First Name");
        inds.Columns.Add("Last Name");
        inds.Columns.Add("Status", typeof(int));
        inds.Columns.Add("Sex", typeof(int));
        inds.Columns.Add("User ID", typeof(int));
        inds.Columns.Add("Local ID");
        inds.Columns.Add("PIID", typeof(int));
        inds.Columns.Add("Date Added");
        inds.Columns.Add("Relevant Clinical Info");
        inds.Columns.Add("DOB");
        inds.Columns.Add("Age", typeof(int));
        inds.Columns.Add("Phenotypes");

        foreach (IndMessage ind in individuals)
        {
            string phenotypes = "";;
            foreach (string phe in ind.Phenotype){
                phenotypes += $"{phe},";
            }
            phenotypes = phenotypes.Substring(0,phenotypes.Length);
            inds.Rows.Add(
                ind.IndividualId,
                ind.IndividualFName,
                ind.IndividualLName,
                ind.IndividualStatus,
                ind.IndividualSex,
                ind.UserId,
                ind.LocalId,
                ind.Piid,
                ind.DateAdd,
                ind.RelevantClinicalInfo,
                ind.IndividualBirthDate,
                ind.Age
            );
        }
        return inds;
    }
    protected async Task CreateDocument()
    {
        DataTable table = CreateIndividualTable();
        excelstream = service.CreateExcel(table);
        await JSRuntime.SaveAs("Individuals.xlsx",excelstream.ToArray());
    }
    private async Task CallApi()
    {
        using (HttpClient client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
            Environment.GetEnvironmentVariable("API_KEY"));
            HttpResponseMessage result = new HttpResponseMessage();
            if (piid == 0) 
            {
                result = await client.GetAsync("https://wings.esat.kuleuven.be/rest-api/individuals");
            }
            else
            {
                result = await client.GetAsync($"https://wings.esat.kuleuven.be/rest-api/individuals?piid={piid}");
            }
            if ((int)result.StatusCode == 200)
            {
                Individual data = await result.Content.ReadFromJsonAsync<Individual>();
                if (data is not null)
                {
                    individuals = data.Message;
                }
            }
            else
            {
                errorMessage = $"There was an error fetching the data (HTTP {(int)result.StatusCode})";
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await CallApi();
    }

}

